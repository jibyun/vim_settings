execute pathogen#infect()
filetype off
call vundle#begin()

" Plugins
" Let Vundle manage itself
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'ciaranm/inkpot'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'majutsushi/tagbar'
Plugin 'vim-syntastic/syntastic'
Plugin 'myint/syntastic-extras'
Plugin 'xolox/vim-easytags'
Plugin 'xolox/vim-misc'
Plugin 'junegunn/vim-easy-align'
Plugin 'Valloric/YouCompleteMe'

call vundle#end()

set nocp
filetype plugin on
filetype plugin indent on

" ---------------------------------------------------------------------------
set t_Co=256
if has('gui_running')
    set bg=light
    set guioptions-=T
    set guioptions-=m
    set guioptions+=c
    "set guifont=Monospace\ 8,Terminal\ 8,fixed
    set guifont=ProggyCleanTT\ 12

    "let g:inkpot_black_background = 1
    colorscheme inkpot              " 256 colour

else
    if $TERM =~ '^xterm'
        set t_Co=256
    elseif $TERM =~ '^screen-bce'
        set t_Co=256            " just guessing
    elseif $TERM =~ '^rxvt'
        set t_Co=88
    elseif $TERM =~ '^linux'
        set t_Co=8
    else
        set t_Co=16
    endif

    set bg=dark
    "set bg=light

    "colorscheme desert256           " 256 colour
    "colorscheme gardener            " 256 colour
    "colorscheme inkpot              " 256 colour
    "colorscheme blacklight          " 256 colour
    "colorscheme transparent
    "colorscheme skittles_dark
    "colorscheme hybrid
    "colorscheme wintersday
    "colorscheme sky
    colorscheme twilight256


    "let g:inkpot_black_background = 0

endif
highlight NonText ctermbg=none
"highlight Normal guibg=none ctermbg=none
" ---------------------------------------------------------------------------


syntax on                       " syntax colour on
let c_no_curly_error = 1

set ruler                       " show line number on bar
set number                      " show line numbers
set autoindent smartindent      " turn on auto/smart indenting
set expandtab shiftwidth=4 smarttab     " tab based on loaded file
"set tabstop=8 softtabstop=0 smarttab
set wrap                        " wrap lines
set cursorline                  " highlight cursor line

if exists("&colorcolumn")
    set colorcolumn=80
    highlight colorcolumn ctermbg=lightblue guibg=lightblue
endif

" ---------------------------------------------------------------------------
" list chars
set list
set listchars=tab:->,trail:.
" ---------------------------------------------------------------------------


" ---------------------------------------------------------------------------
"  searching
set hlsearch                    " enable search highlight globally
set incsearch                   " show matches as soon as possible
set showmatch                   " show matching brackets when typing
" ---------------------------------------------------------------------------

set laststatus=2
set scrolloff=5                 " keep at least 5 lines above/below cursor
set autoread                    " watch for file changes by other programs
"set backup                      " procude *~ back up files
"set backupext=~                 " add ~ to back up file as a suffix

" ---------------------------------------------------------------------------
" tags
set tags=./tags;,./.tags;,~/.vim/tags
" ---------------------------------------------------------------------------

" ---------------------------------------------------------------------------
" ignore files with exts...
set wildignore+=*.d,*.so,*.a,*.o,*.DEP,*.swp,*zip
" ---------------------------------------------------------------------------

" to ensure that set spell check is off
if v:version >= 700
    set spelllang=en
    set nospell
endif

set encoding=utf-8              " use encoding: UTF-8
"------------------------------------------------------------------------------

" ---------------------------------------------------------------------------
" airline configuration
let g:PowerLine_symbols = 'unicode'

"let g:airline_theme='powerlineish'
"let g:airline_theme='papercolor'
"let g:airline_theme='luna'
let g:airline_theme='wombat'

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'

let g:airline_symbols.linenr = '␤'
"let g:airline_symbols.branch = '⭠'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'
"let g:airline_symbols.readonly = '⭤'

let g:airline#extensions#hunks#enabled  = 0
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'

let g:airline_section_a = airline#section#create(['mode'])
"let g:airline_section_a = 'mode'
" let g:airline_section_b =
" let g:airline_section_x = airline#section#create(['%p%%'])
" let g:airline_section_y = airline#section#create(['%B'])
let g:airline_section_z = airline#section#create_right(['%p%%','%l/%L:%c'])
" ---------------------------------------------------------------------------

" ---------------------------------------------------------------------------
" Easytag plugin
let g:easytags_file = '~/.vim/tags'
let g:easytags_auto_update = 0
let g:easytags_on_cursorhold = 0
let g:easytags_dynamic_files = 1
let g:easytags_events = ['BufWritePost']
" ---------------------------------------------------------------------------

" ---------------------------------------------------------------------------
" Syntastic configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Syntastic-extras configuration
let g:syntastic_c_checkers          = ['check']
let g:syntastic_cpp_checkers        = ['check']
let g:syntastic_make_checkers       = ['gnumake']
let g:syntastic_javascript_checkers = ['json_tool']
let g:syntastic_json_checkers       = ['json_tool']
let g:syntastic_python_checkers     = ['pyflakes_with_warnings']
let g:syntastic_gitcommit_checkers  = ['language_check']
let g:syntastic_svn_checkers        = ['language_check']

" ---------------------------------------------------------------------------


" ---------------------------------------------------------------------------
" NERDTree options
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeIgnore = ['\.o$', '\.a$', '\.so$', '\.d$', '\.pyc$', '\.swp$']

" NERDTree git-plugin
let g:NERDTreeIndicatorMapCustom = {
            \ "Modified"  : "✹",
            \ "Staged"    : "✚",
            \ "Untracked" : "✭",
            \ "Renamed"   : "➜",
            \ "Unmerged"  : "═",
            \ "Deleted"   : "✖",
            \ "Dirty"     : "✗",
            \ "Clean"     : "✔︎",
            \ 'Ignored'   : "☒",
            \ "Unknown"   : "?"
            \ }
" ---------------------------------------------------------------------------
" Tagbar settings
nmap <F4> :TagbarToggle<CR>
let g:tagbar_sort = 0
" ---------------------------------------------------------------------------

" ---------------------------------------------------------------------------
" easy align
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EashAlign)
" ---------------------------------------------------------------------------

"------------------------------------------------------------------------------
" Private Mappings
"------------------------------------------------------------------------------
let maplocalleader=','
" ctrl + a to select all
map <C-a> <esc>ggVG<CR>
" shift + f to fix indentation
map <S-f> <esc>gg=G<CR>
" auto complete {}
inoremap {<CR> {<CR>}<C-o>O

map <LocalLeader>ls :ls<CR>
map <LocalLeader>nerd :NERDTree<CR>
" enable indent 4 spaces == tab
map <LocalLeader>sw4 :set expandtab shiftwidth=4<CR>
" enable indent tab == tab
map <LocalLeader>sw8 :set noexpandtab shiftwidth=8<CR>
" enable indent 3 spaces == tab
map <LocalLeader>sw3 :set expandtab shiftwidth=3<CR>

" enable list
map <LocalLeader>l :set list<CR>
" diable list
map <LocalLeader>nl :set nolist<CR>

" Show func
map <LocalLeader>sf <Plug>ShowFunc

" buffer mapping
" move to next
map <C-b> <esc>:bn<CR>
map <S-b> <esc>:bp<CR>
map <LocalLeader>bd :bdelete %<CR>

" delete to the beginning of file
map <LocalLeader>gd :1,.d<CR>

" delete to the end of file
map <LocalLeader>Gd :.,$d<CR>

" turn off sytastic report
map <LocalLeader>sr :SyntasticReset<CR>

" run systastic check
map <LocalLeader>sc :SyntasticCheck<CR>

"------------------------------------------------------------------------------
"------------------------------------------------------------------------------

"--------- HELPERS ---------
"  Delete trailing white space on save
func! DeleteTrailingWS()
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal `z"
endfunc
"autocmd BufWrite *.py  :call DeleteTrailingWS()
"autocmd BufWrite *.cpp :call DeleteTrailingWS()
"autocmd BufWrite *.c   :call DeleteTrailingWS()
"autocmd BufWrite *.h   :call DeleteTrailingWS()
"autocmd BufWrite *.nsi :call DeleteTrailingWS()
autocmd BufWrite * :call DeleteTrailingWS()



