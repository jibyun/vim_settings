execute pathogen#infect()
filetype off
call vundle#begin()

" Plugins
" Let Vundle manage itself
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'majutsushi/tagbar'
Plugin 'vim-syntastic/syntastic'
Plugin 'myint/syntastic-extras'
Plugin 'junegunn/vim-easy-align'
Plugin 'Valloric/YouCompleteMe'
Plugin 'suy/vim-qmake'

call vundle#end()

set nocp
filetype plugin on
filetype plugin indent on

" ---------------------------------------------------------------------------
set t_Co=256
if has('gui_running')
    set bg=light
    set guioptions-=T
    set guioptions-=m
    set guioptions+=c
    "set guifont=Monospace\ 8,Terminal\ 8,fixed
    set guifont=ProggyCleanTT\ 12

    "let g:inkpot_black_background = 1
    colorscheme inkpot              " 256 colour

else
    if $TERM =~ '^xterm'
        set t_Co=256
    elseif $TERM =~ '^screen-bce'
        set t_Co=256            " just guessing
    elseif $TERM =~ '^rxvt'
        set t_Co=88
    elseif $TERM =~ '^linux'
        set t_Co=8
    else
        set t_Co=16
    endif

    set bg=dark
    "set bg=light

    "colorscheme desert256           " 256 colour
    "colorscheme gardener            " 256 colour
    "colorscheme inkpot              " 256 colour
    "colorscheme blacklight          " 256 colour
    "colorscheme transparent
    "colorscheme skittles_dark
    "colorscheme hybrid
    "colorscheme wintersday
    "colorscheme sky
    colorscheme maui


    "let g:inkpot_black_background = 0
endif
highlight NonText ctermbg=none
"highlight Normal guibg=none ctermbg=none
" ---------------------------------------------------------------------------


syntax on                       " syntax colour on
let c_no_curly_error = 1

set ruler                       " show line number on bar
set number                      " show line numbers
set autoindent smartindent      " turn on auto/smart indenting
set expandtab shiftwidth=4 smarttab     " tab based on loaded file
"set tabstop=8 softtabstop=0 smarttab
set wrap                        " wrap lines
set cursorline                  " highlight cursor line

if exists("&colorcolumn")
    set colorcolumn=80
    highlight colorcolumn ctermbg=lightblue guibg=lightblue
endif

" ---------------------------------------------------------------------------
" list chars
set list
set listchars=tab:->,trail:.
" ---------------------------------------------------------------------------


" ---------------------------------------------------------------------------
"  searching
set hlsearch                    " enable search highlight globally
set incsearch                   " show matches as soon as possible
set showmatch                   " show matching brackets when typing
" ---------------------------------------------------------------------------

set laststatus=2
set scrolloff=5                 " keep at least 5 lines above/below cursor
set autoread                    " watch for file changes by other programs
"set backup                      " procude *~ back up files
"set backupext=~                 " add ~ to back up file as a suffix

" ---------------------------------------------------------------------------
" tags
set tags+=./tags,./.tags,../tags,../../tags,../../../tags,../../../../tags,~/.vim/tags
" ---------------------------------------------------------------------------

" ---------------------------------------------------------------------------
" ignore files with exts...
set wildignore+=*.d,*.so,*.a,*.o,*.DEP,*.swp,*zip
" ---------------------------------------------------------------------------

" to ensure that set spell check is off
if v:version >= 700
    set spelllang=en
    set nospell
endif

set encoding=utf-8              " use encoding: UTF-8
"------------------------------------------------------------------------------

" ---------------------------------------------------------------------------
" airline configuration
let g:PowerLine_symbols = 'unicode'

"let g:airline_theme='powerlineish'
"let g:airline_theme='papercolor'
"let g:airline_theme='luna'
let g:airline_theme='wombat'

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'

let g:airline_symbols.linenr = '␤'
"let g:airline_symbols.branch = '⭠'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'
"let g:airline_symbols.readonly = '⭤'

let g:airline#extensions#hunks#enabled  = 0
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'

let g:airline_section_a = airline#section#create(['mode'])
"let g:airline_section_a = 'mode'
" let g:airline_section_b =
" let g:airline_section_x = airline#section#create(['%p%%'])
" let g:airline_section_y = airline#section#create(['%B'])
let g:airline_section_z = airline#section#create_right(['%p%%','%l/%L:%c'])
" ---------------------------------------------------------------------------

" ---------------------------------------------------------------------------
" Easytag plugin
let g:easytags_file = '~/.vim/tags'
let g:easytags_auto_update = 0
let g:easytags_on_cursorhold = 0
let g:easytags_dynamic_files = 1
let g:easytags_include_members = 1
let g:easytags_resolve_links = 1
let g:easytags_events = ['BufWritePost']
" ---------------------------------------------------------------------------

" ---------------------------------------------------------------------------
" Syntastic configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" Syntastic-extras configuration
let g:syntastic_c_checkers          = ['check']
let g:syntastic_cpp_checkers        = ['check']
let g:syntastic_make_checkers       = ['gnumake']
let g:syntastic_javascript_checkers = ['json_tool']
let g:syntastic_json_checkers       = ['json_tool']
let g:syntastic_python_checkers     = ['pyflakes_with_warnings']
let g:syntastic_gitcommit_checkers  = ['language_check']
let g:syntastic_svn_checkers        = ['language_check']

" ---------------------------------------------------------------------------


" ---------------------------------------------------------------------------
" NERDTree options
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeIgnore = ['\.o$', '\.a$', '\.so$', '\.d$', '\.pyc$', '\.swp$']

" NERDTree git-plugin
let g:NERDTreeIndicatorMapCustom = {
            \ "Modified"  : "✹",
            \ "Staged"    : "✚",
            \ "Untracked" : "✭",
            \ "Renamed"   : "➜",
            \ "Unmerged"  : "═",
            \ "Deleted"   : "✖",
            \ "Dirty"     : "✗",
            \ "Clean"     : "✔︎",
            \ 'Ignored'   : "☒",
            \ "Unknown"   : "?"
            \ }
" ---------------------------------------------------------------------------
" Tagbar settings
nmap <F4> :TagbarToggle<CR>
let g:tagbar_sort = 0
" ---------------------------------------------------------------------------

" ---------------------------------------------------------------------------
" easy align
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EashAlign)
" ---------------------------------------------------------------------------

"------------------------------------------------------------------------------
" Private Mappings
"------------------------------------------------------------------------------
let maplocalleader=','

" ctrl + a to select all
map <C-a> <esc>ggVG<CR>
" shift + f to fix indentation
map <S-f> <esc>gg=G<CR>
" auto complete {}
inoremap {<CR> {<CR>}<C-o>O

map <LocalLeader>ls :ls<CR>
map <LocalLeader>nerd :NERDTree<CR>
" enable indent 4 spaces == tab
map <LocalLeader>sw4 :set expandtab shiftwidth=4<CR>
" enable indent tab == tab
map <LocalLeader>sw8 :set noexpandtab shiftwidth=8<CR>
" enable indent 3 spaces == tab
map <LocalLeader>sw3 :set expandtab shiftwidth=3<CR>

" enable list
map <LocalLeader>l :set list<CR>
" diable list
map <LocalLeader>nl :set nolist<CR>

" Show func
map <LocalLeader>sf <Plug>ShowFunc

" buffer mapping
" move to next
map <C-b> <esc>:bn<CR>
map <S-b> <esc>:bp<CR>
map <LocalLeader>bd :bdelete %<CR>

" delete to the beginning of file
map <LocalLeader>gd :1,.d<CR>

" delete to the end of file
map <LocalLeader>Gd :.,$d<CR>

" Syntasitc short keys
" clear sytastic error/warning list
map <LocalLeader>sr :SyntasticReset<CR>
" run systastic check
map <LocalLeader>sc :SyntasticCheck<CR>
" toggle mode to switch between active (check on buffer write) and passive (manual)
map <LocalLeader>sm :SyntasticToggleMode<CR>



" Update tags
map <LocalLeader>ut :UpdateTags<CR>

"------------------------------------------------------------------------------
"------------------------------------------------------------------------------

"--------- HELPERS ---------
"  Delete trailing white space on save
func! DeleteTrailingWS()
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal `z"
endfunc
"autocmd BufWrite *.py  :call DeleteTrailingWS()
"autocmd BufWrite *.cpp :call DeleteTrailingWS()
"autocmd BufWrite *.c   :call DeleteTrailingWS()
"autocmd BufWrite *.h   :call DeleteTrailingWS()
"autocmd BufWrite *.nsi :call DeleteTrailingWS()
autocmd BufWrite * :call DeleteTrailingWS()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CSCOPE settings for vim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" This file contains some boilerplate settings for vim's cscope interface,
" plus some keyboard mappings that I've found useful.
"
" USAGE:
" -- vim 6:     Stick this file in your ~/.vim/plugin directory (or in a
"               'plugin' directory in some other directory that is in your
"               'runtimepath'.
"
" -- vim 5:     Stick this file somewhere and 'source cscope.vim' it from
"               your ~/.vimrc file (or cut and paste it into your .vimrc).
"
" NOTE:
" These key maps use multiple keystrokes (2 or 3 keys).  If you find that vim
" keeps timing you out before you can complete them, try changing your timeout
" settings, as explained below.
"
" Happy cscoping,
"
" Jason Duell       jduell@alumni.princeton.edu     2002/3/7
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


" This tests to see if vim was configured with the '--enable-cscope' option
" when it was compiled.  If it wasn't, time to recompile vim...
if has("cscope")

    """"""""""""" Standard cscope/vim boilerplate

    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag

    " check cscope for definition of a symbol before checking ctags: set to 1
    " if you want the reverse search order.
    set csto=0

    """"""""""""" My cscope/vim key mappings
    "
    " The following maps all invoke one of the following cscope search types:
    "
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls
    "
    " Below are three sets of the maps: one set that just jumps to your
    " search result, one that splits the existing vim window horizontally and
    " diplays your search result in the new window, and one that does the same
    " thing, but does a vertical split instead (vim 6 only).
    "
    " I've used CTRL-\ and CTRL-@ as the starting keys for these maps, as it's
    " unlikely that you need their default mappings (CTRL-\'s default use is
    " as part of CTRL-\ CTRL-N typemap, which basically just does the same
    " thing as hitting 'escape': CTRL-@ doesn't seem to have any default use).
    " If you don't like using 'CTRL-@' or CTRL-\, , you can change some or all
    " of these maps to use other keys.  One likely candidate is 'CTRL-_'
    " (which also maps to CTRL-/, which is easier to type).  By default it is
    " used to switch between Hebrew and English keyboard mode.
    "
    " All of the maps involving the <cfile> macro use '^<cfile>$': this is so
    " that searches over '#include <time.h>" return only references to
    " 'time.h', and not 'sys/time.h', etc. (by default cscope will return all
    " files that contain 'time.h' as part of their name).


    " To do the first type of search, hit 'CTRL-\', followed by one of the
    " cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
    " search will be displayed in the current window.  You can use CTRL-T to
    " go back to where you were before the search.
    "

    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>


    " Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
    " makes the vim window split horizontally, with search result displayed in
    " the new window.
    "
    " (Note: earlier versions of vim may not have the :scs command, but it
    " can be simulated roughly via:
    "    nmap <C-@>s <C-W><C-S> :cs find s <C-R>=expand("<cword>")<CR><CR>

    nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>

    " Hitting CTRL-space *twice* before the search type does a vertical
    " split instead of a horizontal one (vim 6 and up only)
    "
    " (Note: you may wish to put a 'set splitright' in your .vimrc
    " if you prefer the new window on the right instead of the left

    nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

    " add any cscope database in current directory
    func! LoadCscope()
        let db = findfile("cscope.out", ".;")
        if (!empty(db))
            let path = strpart(db, 0, match(db, "/cscope.out$"))
            set nocscopeverbose  " required to avoid 'duplicate cscope database not added error'
            exe "cs add ".db." ".path
            " show msg when any other cscope db added
            set cscopeverbose
        endif
    endfunc

    autocmd BufEnter,BufRead,BufWrite * call LoadCscope()

    """"""""""""" key map timeouts
    "
    " By default Vim will only wait 1 second for each keystroke in a mapping.
    " You may find that too short with the above typemaps.  If so, you should
    " either turn off mapping timeouts via 'notimeout'.
    "
    "set notimeout
    "
    " Or, you can keep timeouts, by uncommenting the timeoutlen line below,
    " with your own personal favorite value (in milliseconds):
    "
    "set timeoutlen=4000
    "
    " Either way, since mapping timeout settings by default also set the
    " timeouts for multicharacter 'keys codes' (like <F1>), you should also
    " set ttimeout and ttimeoutlen: otherwise, you will experience strange
    " delays as vim waits for a keystroke after you hit ESC (it will be
    " waiting to see if the ESC is actually part of a key code like <F1>).
    "
    "set ttimeout
    "
    " personally, I find a tenth of a second to work well for key code
    " timeouts. If you experience problems and have a slow terminal or network
    " connection, set it higher.  If you don't set ttimeoutlen, the value for
    " timeoutlent (default: 1000 = 1 second, which is sluggish) is used.
    "
    "set ttimeoutlen=100

    " Short cuts for cscope command(s)
    " ctrl + F12 to get the up-to-date cscope tags
    map <C-F12> <esc>:!cscope -RUbq<CR>:e<CR>

endif




