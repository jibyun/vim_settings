
call plug#begin()
"
" Plugins
Plug 'flazz/vim-colorschemes'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'junegunn/vim-easy-align'
"Plug 'mphe/grayout.vim'
call plug#end()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General & Global
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible                " vi compatibility off
set autoread                    " watch for file changes by other programs
filetype plugin on

" to ensure that set spell check is off
if v:version >= 700
    set spelllang=en
    set nospell
endif

let maplocalleader=','          " set private mapping local leader

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" encoding and colour
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set encoding=utf-8              " use encoding: UTF-8
set background=dark
colorscheme evening

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Indentation, tabs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set autoindent      " turn on autoindent
set smartindent     " turn on smartindent
set expandtab       " use spaces instead of tabs
set smarttab        " insert spaces based on shiftwidth or tabstop
set shiftwidth=4    " when shifting, use 4 spaces for indent (default)
set tabstop=4       " indent using 4 spaces
set list
set listchars=tab:->,trail:.    " to see whether tab or spaces are used for tab

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  searching
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set hlsearch    " enable search highlight globally
set incsearch   " show matches as soon as possible
set ignorecase  " case insensitive search when lower case letters are only used
set smartcase   " case sensitive search as soon as a upper case letter is used for searching

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" code edit helpers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable
set showmatch                   " show matching brackets when typing
set ruler                       " show line number on bar
set number                      " show line numbers
set wrap                        " wrap lines
set cursorline                  " highlight cursor line
set scrolloff=5                 " keep at least 5 lines above/below cursor

"if exists("&colorcolumn")
"    set colorcolumn=80
"    highlight colorcolumn ctermbg=lightblue guibg=lightblue
"endif

" enable indent 4 spaces == tab
map <LocalLeader>sw4 :set expandtab shiftwidth=4<CR>
" enable indent tab == tab
map <LocalLeader>sw8 :set noexpandtab shiftwidth=8<CR>
" enable indent 3 spaces == tab
map <LocalLeader>sw3 :set expandtab shiftwidth=3<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" tabline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set showtabline=2

" tab mapping
map <LocalLeader>e :tabe
map <LocalLeader>ba :tab ball<CR>
map <LocalLeader>ff :tabn<CR>
map <LocalLeader>re :tabp<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" statusline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set laststatus=2
let g:currentmode={
            \ 'n'  : 'NORMAL ',
            \ 'v'  : 'VISUAL ',
            \ 'V'  : 'V·Line ',
            \ "\<C-V>" : 'V·Block ',
            \ 'i'  : 'INSERT ',
            \ 'R'  : 'REPLACE ',
            \ 'Rv' : 'V·Replace ',
            \ 'c'  : 'Command ',
            \}

set statusline=
set statusline+=\ %{toupper(g:currentmode[mode()])}
set statusline+=\|\ %f              " relative file path
set statusline+=%h                  " help buffer line
set statusline+=%m                  " modified
set statusline+=%r                  " readonly
set statusline+=%=                  " move to right
set statusline+=%y                  " filetype
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\ \|\ %{&fileformat}
set statusline+=\ \|\ %l:%c         " line number:column number
set statusline+=\ \|\ %p%%          " percentage based on line number
set statusline+=\ \|
"
"set backup                      " procude *~ back up files
"set backupext=~                 " add ~ to back up file as a suffix

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" tags
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tags+=,../tags,../../tags,../../../tags,../../../../tags
map ,tags !ctags -R .<CR>

" Notes for tag jumping
" ^] to jump to tag under cursor
" g^] for ambiguous tags
" ^t to jump back up the tag stack

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" file finder
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set path+=** " search down sub folders
set wildmenu " enable command-line completion
" ignore the follwing ext from search path
set wildignore+=*.d,*.so,*.a,*.o,*.DEP,*.swp,*zip

map <LocalLeader>ls :ls<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" default auto complete notes
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" documented in ins-completion

" most used ones
" ^x^n for JUST this file
" ^x^f for filenames (works with the path trick)
" ^x^] for tags only
" ^n for anything specified by the 'complete' option

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeIgnore = ['\.o$', '\.a$', '\.so$', '\.d$', '\.pyc$', '\.swp$']

map <LocalLeader>nerd :NERDTree<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tagbar settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:tagbar_sort = 0
let g:tagbar_ctags_bin = '/u/jonginb/bin/ctags'

nmap <F4> :TagbarToggle<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" easy align
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EashAlign)


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Private Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ctrl + a to select all
map <C-a> <esc>ggVG<CR>
" shift + f to fix indentation
map <S-f> <esc>gg=G<CR>
" auto complete {}
inoremap {<CR> {<CR>}<C-o>O

" enable list
map <LocalLeader>l :set list<CR>
" diable list
map <LocalLeader>nl :set nolist<CR>

" buffer mapping
" move to next
map <C-b> <esc>:bn<CR>
map <S-b> <esc>:bp<CR>
map <LocalLeader>bd :bdelete %<CR>

" delete to the beginning of file
map <LocalLeader>gd :1,.d<CR>

" delete to the end of file
map <LocalLeader>Gd :.,$d<CR>

"--------- HELPERS ---------
"  Delete trailing white space on save
func! DeleteTrailingWS()
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal `z"
endfunc
"autocmd BufWrite *.py  :call DeleteTrailingWS()
"autocmd BufWrite *.cpp :call DeleteTrailingWS()
"autocmd BufWrite *.c   :call DeleteTrailingWS()
"autocmd BufWrite *.h   :call DeleteTrailingWS()
"autocmd BufWrite *.nsi :call DeleteTrailingWS()
autocmd BufWrite * :call DeleteTrailingWS()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CSCOPE settings for vim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" This file contains some boilerplate settings for vim's cscope interface,
" plus some keyboard mappings that I've found useful.
"
" USAGE:
" -- vim 6:     Stick this file in your ~/.vim/plugin directory (or in a
"               'plugin' directory in some other directory that is in your
"               'runtimepath'.
"
" -- vim 5:     Stick this file somewhere and 'source cscope.vim' it from
"               your ~/.vimrc file (or cut and paste it into your .vimrc).
"
" NOTE:
" These key maps use multiple keystrokes (2 or 3 keys).  If you find that vim
" keeps timing you out before you can complete them, try changing your timeout
" settings, as explained below.
"
" Happy cscoping,
"
" Jason Duell       jduell@alumni.princeton.edu     2002/3/7
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


" This tests to see if vim was configured with the '--enable-cscope' option
" when it was compiled.  If it wasn't, time to recompile vim...
if has("cscope")

    """"""""""""" Standard cscope/vim boilerplate

    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag

    " check cscope for definition of a symbol before checking ctags: set to 1
    " if you want the reverse search order.
    set csto=0

    """"""""""""" My cscope/vim key mappings
    "
    " The following maps all invoke one of the following cscope search types:
    "
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls
    "
    " Below are three sets of the maps: one set that just jumps to your
    " search result, one that splits the existing vim window horizontally and
    " diplays your search result in the new window, and one that does the same
    " thing, but does a vertical split instead (vim 6 only).
    "
    " I've used CTRL-\ and CTRL-@ as the starting keys for these maps, as it's
    " unlikely that you need their default mappings (CTRL-\'s default use is
    " as part of CTRL-\ CTRL-N typemap, which basically just does the same
    " thing as hitting 'escape': CTRL-@ doesn't seem to have any default use).
    " If you don't like using 'CTRL-@' or CTRL-\, , you can change some or all
    " of these maps to use other keys.  One likely candidate is 'CTRL-_'
    " (which also maps to CTRL-/, which is easier to type).  By default it is
    " used to switch between Hebrew and English keyboard mode.
    "
    " All of the maps involving the <cfile> macro use '^<cfile>$': this is so
    " that searches over '#include <time.h>" return only references to
    " 'time.h', and not 'sys/time.h', etc. (by default cscope will return all
    " files that contain 'time.h' as part of their name).


    " To do the first type of search, hit 'CTRL-\', followed by one of the
    " cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
    " search will be displayed in the current window.  You can use CTRL-T to
    " go back to where you were before the search.
    "

    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>


    " Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
    " makes the vim window split horizontally, with search result displayed in
    " the new window.
    "
    " (Note: earlier versions of vim may not have the :scs command, but it
    " can be simulated roughly via:
    "    nmap <C-@>s <C-W><C-S> :cs find s <C-R>=expand("<cword>")<CR><CR>

    nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>

    " Hitting CTRL-space *twice* before the search type does a vertical
    " split instead of a horizontal one (vim 6 and up only)
    "
    " (Note: you may wish to put a 'set splitright' in your .vimrc
    " if you prefer the new window on the right instead of the left

    nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

    " add any cscope database in current directory
    func! LoadCscope()
        let db = findfile("cscope.out", ".;")
        if (!empty(db))
            let path = strpart(db, 0, match(db, "/cscope.out$"))
            set nocscopeverbose  " required to avoid 'duplicate cscope database not added error'
            exe "cs add ".db." ".path
            " show msg when any other cscope db added
            set cscopeverbose
        endif
    endfunc

    autocmd BufEnter,BufRead,BufWrite * call LoadCscope()

    """"""""""""" key map timeouts
    "
    " By default Vim will only wait 1 second for each keystroke in a mapping.
    " You may find that too short with the above typemaps.  If so, you should
    " either turn off mapping timeouts via 'notimeout'.
    "
    "set notimeout
    "
    " Or, you can keep timeouts, by uncommenting the timeoutlen line below,
    " with your own personal favorite value (in milliseconds):
    "
    "set timeoutlen=4000
    "
    " Either way, since mapping timeout settings by default also set the
    " timeouts for multicharacter 'keys codes' (like <F1>), you should also
    " set ttimeout and ttimeoutlen: otherwise, you will experience strange
    " delays as vim waits for a keystroke after you hit ESC (it will be
    " waiting to see if the ESC is actually part of a key code like <F1>).
    "
    "set ttimeout
    "
    " personally, I find a tenth of a second to work well for key code
    " timeouts. If you experience problems and have a slow terminal or network
    " connection, set it higher.  If you don't set ttimeoutlen, the value for
    " timeoutlent (default: 1000 = 1 second, which is sluggish) is used.
    "
    "set ttimeoutlen=100

    " Short cuts for cscope command(s)
    " ctrl + F12 to get the up-to-date cscope tags
    map <C-F12> <esc>:!cscope -RUbq<CR>:e<CR>

endif




